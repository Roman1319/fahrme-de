#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ ellipsis (–Ω–µ spread operator)
const suspiciousPatterns = [
  /\.\.\.\s*$/,  // —Ç—Ä–∏ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
  /\.\.\.\s*[^.\s]/,  // —Ç—Ä–∏ —Ç–æ—á–∫–∏ –Ω–µ –≤ spread operator –∏ –Ω–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  /‚Ä¶\s*$/,  // –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
];

// –ò—Å–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å–ª—É—á–∞–∏
const validPatterns = [
  /\.\.\.\s*\/\//,  // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  /\.\.\.\s*\/\*/,  // –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  /\.\.\.\s*['"`]/,  // —Å—Ç—Ä–æ–∫–∏
  /\.\.\.\s*[a-zA-Z_$]/,  // spread operator
  /\.\.\.\s*\{/,  // spread –≤ –æ–±—ä–µ–∫—Ç–∞—Ö
  /\.\.\.\s*\[/,  // spread –≤ –º–∞—Å—Å–∏–≤–∞—Ö
  /\.\.\.\s*\(/,  // spread –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
  /<[^>]*>.*\.\.\./,  // HTML —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º (UI —Ç–µ–∫—Å—Ç—ã)
  /console\.(log|warn|error).*\.\.\./,  // console —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
  /placeholder.*\.\.\./,  // placeholder —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
  /Loading\.\.\./,  // Loading —Ç–µ–∫—Å—Ç—ã
  /Lade.*\.\.\./,  // Lade —Ç–µ–∫—Å—Ç—ã
  /Uploading\.\.\./,  // Uploading —Ç–µ–∫—Å—Ç—ã
  /Redirecting\.\.\./,  // Redirecting —Ç–µ–∫—Å—Ç—ã
  /Speichern.*\.\.\./,  // Speichern —Ç–µ–∫—Å—Ç—ã
  /Bilder werden verarbeitet\.\.\./,  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  /Ich kann lesen‚Ä¶/,  // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
];

function checkFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    const issues = [];
    
    lines.forEach((line, index) => {
      suspiciousPatterns.forEach(pattern => {
        if (pattern.test(line)) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π —Å–ª—É—á–∞–π
          const isValid = validPatterns.some(validPattern => validPattern.test(line));
          if (!isValid) {
            issues.push({
              line: index + 1,
              content: line.trim(),
              pattern: pattern.toString()
            });
          }
        }
      });
    });
    
    return issues;
  } catch (error) {
    return [{ error: error.message }];
  }
}

function scanDirectory(dir, extensions = ['.ts', '.tsx', '.js', '.jsx']) {
  const issues = [];
  
  function walkDir(currentPath) {
    const items = fs.readdirSync(currentPath);
    
    items.forEach(item => {
      const fullPath = path.join(currentPath, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        walkDir(fullPath);
      } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
        const fileIssues = checkFile(fullPath);
        if (fileIssues.length > 0) {
          issues.push({
            file: fullPath,
            issues: fileIssues
          });
        }
      }
    });
  }
  
  walkDir(dir);
  return issues;
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
const srcDir = path.join(__dirname, '..', 'src');
const issues = scanDirectory(srcDir);

// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã
const rootFiles = ['test-ellipsis.ts', 'test-ellipsis.js'];
rootFiles.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    const fileIssues = checkFile(filePath);
    if (fileIssues.length > 0) {
      issues.push({
        file: filePath,
        issues: fileIssues
      });
    }
  }
});

if (issues.length > 0) {
  console.error('‚ùå –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ ellipsis:');
  issues.forEach(({ file, issues: fileIssues }) => {
    console.error(`\nüìÅ ${file}:`);
    fileIssues.forEach(issue => {
      if (issue.error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞: ${issue.error}`);
      } else {
        console.error(`  ‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ ${issue.line}: ${issue.content}`);
      }
    });
  });
  process.exit(1);
} else {
  console.log('‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö ellipsis –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  process.exit(0);
}
