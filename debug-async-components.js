const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .tsx –∏ .ts
function findFiles(dir, extensions = ['.tsx', '.ts']) {
  let results = [];
  const list = fs.readdirSync(dir);
  
  list.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat && stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ .next
      if (!['node_modules', '.next', '.git'].includes(file)) {
        results = results.concat(findFiles(filePath, extensions));
      }
    } else {
      const ext = path.extname(file);
      if (extensions.includes(ext)) {
        results.push(filePath);
      }
    }
  });
  
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ async –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
function checkFileForAsyncComponents(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    
    const issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 'use client' –¥–∏—Ä–µ–∫—Ç–∏–≤—É
    const hasUseClient = content.includes("'use client'");
    
    if (hasUseClient) {
      // –ò—â–µ–º async —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
      lines.forEach((line, index) => {
        const lineNum = index + 1;
        
        // –ò—â–µ–º async —Ñ—É–Ω–∫—Ü–∏–∏
        if (line.includes('async function') || line.includes('async =') || line.includes('async(')) {
          issues.push({
            type: 'async function',
            line: lineNum,
            content: line.trim(),
            file: filePath
          });
        }
        
        // –ò—â–µ–º export default async
        if (line.includes('export default') && line.includes('async')) {
          issues.push({
            type: 'async component',
            line: lineNum,
            content: line.trim(),
            file: filePath
          });
        }
        
        // –ò—â–µ–º await –≤ –Ω–µ-async —Ñ—É–Ω–∫—Ü–∏—è—Ö
        if (line.includes('await ') && !line.includes('async')) {
          issues.push({
            type: 'await without async',
            line: lineNum,
            content: line.trim(),
            file: filePath
          });
        }
      });
    }
    
    return issues;
  } catch (error) {
    console.error(`Error reading file ${filePath}:`, error.message);
    return [];
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function debugAsyncComponents() {
  console.log('üîç –ü–æ–∏—Å–∫ async –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ...\n');
  
  const srcDir = path.join(__dirname, 'src');
  const files = findFiles(srcDir);
  
  let totalIssues = 0;
  const allIssues = [];
  
  files.forEach(file => {
    const issues = checkFileForAsyncComponents(file);
    if (issues.length > 0) {
      allIssues.push(...issues);
      totalIssues += issues.length;
    }
  });
  
  if (totalIssues === 0) {
    console.log('‚úÖ Async –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
  } else {
    console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${totalIssues} –ø—Ä–æ–±–ª–µ–º —Å async –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏:\n`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
    const issuesByFile = {};
    allIssues.forEach(issue => {
      if (!issuesByFile[issue.file]) {
        issuesByFile[issue.file] = [];
      }
      issuesByFile[issue.file].push(issue);
    });
    
    Object.keys(issuesByFile).forEach(file => {
      console.log(`üìÅ ${file}:`);
      issuesByFile[file].forEach(issue => {
        console.log(`  ${issue.type.toUpperCase()}: —Å—Ç—Ä–æ–∫–∞ ${issue.line}`);
        console.log(`  ${issue.content}`);
        console.log('');
      });
    });
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã...');
  let dynamicImports = 0;
  
  files.forEach(file => {
    try {
      const content = fs.readFileSync(file, 'utf8');
      if (content.includes('await import(') || content.includes('import(')) {
        console.log(`‚ö†Ô∏è  –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≤ ${file}`);
        dynamicImports++;
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è
    }
  });
  
  if (dynamicImports === 0) {
    console.log('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
  
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log(`- Async –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`);
  console.log(`- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: ${dynamicImports}`);
  
  if (totalIssues > 0) {
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –£–±–µ—Ä–∏—Ç–µ async –∏–∑ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö');
    console.log('2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .then() –≤–º–µ—Å—Ç–æ await –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö');
    console.log('3. –û–±–µ—Ä–Ω–∏—Ç–µ async –ª–æ–≥–∏–∫—É –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ async —Ñ—É–Ω–∫—Ü–∏–∏');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–±–∞–≥
debugAsyncComponents();
